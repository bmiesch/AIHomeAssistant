#!/bin/bash
set -e

# Arguments
SERVICE_NAME=$1
ARCH=$2
BUILD_TYPE=${3:-Release}

# Define supported architectures with their full Docker image identifiers
# Use a simpler array format for better compatibility
SUPPORTED_ARCHS="arm64:arm64v8/debian:bookworm arm64v8-ubuntu18:arm64v8/ubuntu:18.04"

# Define base build dependencies that are always needed
BASE_DEPS=(
    # "crossbuild-essential-arm64"
    "ccache"
    "g++"
    "make"
    "git"
    "pkg-config"
)

# Check if required arguments are provided
if [ -z "$SERVICE_NAME" ] || [ -z "$ARCH" ]; then
    echo "Usage: $0 <service_name> <architecture> [build_type]"
    echo ""
    echo "Arguments:"
    echo "  service_name    Name of the service to build"
    echo "  architecture    Target architecture. Supported: $(echo "$SUPPORTED_ARCHS" | cut -d: -f1)"
    echo "  build_type     Optional: Build type (default: release)"
    exit 1
fi

if [ -z "${ROOT_DIR}" ]; then
    ROOT_DIR=$(pwd)
fi
TARGETS_DIR="${ROOT_DIR}/targets/${ARCH}"
DEPS_FILE="${ROOT_DIR}/services/${SERVICE_NAME}/dependencies.txt"

# Validate architecture
VALID_ARCH=0

# Get the Docker image for the given architecture
for arch_def in $SUPPORTED_ARCHS; do
    ARCH_NAME=${arch_def%%:*}
    if [ "${ARCH_NAME}" = "$ARCH" ]; then
        DOCKER_IMAGE=${arch_def#*:}
        VALID_ARCH=1
        break
    fi
done

if [ $VALID_ARCH -eq 0 ]; then
    echo "Error: Unsupported architecture '${ARCH}'"
    echo "Supported architectures: $(echo "$SUPPORTED_ARCHS" | cut -d: -f1)"
    exit 1
fi

if [ -z "$SERVICE_NAME" ] || [ -z "$ARCH" ]; then
    echo "Usage: $0 <service_name> <architecture> [build_type]"
    exit 1
fi

if [ ! -f "$DEPS_FILE" ]; then
    echo "Dependencies file not found: $DEPS_FILE"
    exit 1
fi

# Create Dockerfile for this specific build
DOCKER_FILE="${ROOT_DIR}/.docker/Dockerfile.${SERVICE_NAME}.${ARCH}"
cat > "${DOCKER_FILE}" << EOF
FROM ${DOCKER_IMAGE}

ENV DEBIAN_FRONTEND=noninteractive

# Add Kitware repository for newer CMake based on distribution
RUN apt-get update && apt-get install -y wget gpg && \\
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null && \\
EOF

# Add distribution-specific repository
if [[ "${DOCKER_IMAGE}" == *"debian:bookworm"* ]]; then
    echo '    echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bookworm main" | tee /etc/apt/sources.list.d/kitware.list >/dev/null && \' >> "$DOCKER_FILE"
elif [[ "${DOCKER_IMAGE}" == *"ubuntu:18.04"* ]]; then
    echo '    echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main" | tee /etc/apt/sources.list.d/kitware.list >/dev/null && \' >> "$DOCKER_FILE"
fi

cat >> "${DOCKER_FILE}" << EOF
    apt-get update

# Install system dependencies
RUN apt-get install -y \\
EOF

# Add base dependencies to Dockerfile
for dep in "${BASE_DEPS[@]}"; do
    echo "    $dep \\" >> "$DOCKER_FILE"
done

# Add cmake separately after other base deps
echo "    cmake \\" >> "$DOCKER_FILE"

# Add service-specific dependencies to Dockerfile
grep -v '^#' "$DEPS_FILE" | while read -r dep; do
    if [ ! -z "$dep" ]; then
        echo "    $dep \\" >> "$DOCKER_FILE"
    fi
done

echo "    && rm -rf /var/lib/apt/lists/*" >> "$DOCKER_FILE"

# Setup build environment
echo "WORKDIR /build" >> "$DOCKER_FILE"

CONTAINER_NAME="${SERVICE_NAME}-${ARCH}-container"

if ! docker ps -a | grep -q ${CONTAINER_NAME}; then
    if ! docker build \
        -t "${SERVICE_NAME}-${ARCH}" \
        -f "$DOCKER_FILE" .; then
        echo "Docker build failed!"
        exit 1
    fi
    
    docker create --name "${CONTAINER_NAME}" -t "${SERVICE_NAME}-${ARCH}" tail -f /dev/null
    docker start ${CONTAINER_NAME}
    
    docker cp services "${CONTAINER_NAME}:/build/"
    docker exec ${CONTAINER_NAME} /bin/bash -c "cd /build/services/${SERVICE_NAME} && cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE && cmake --build build"
else
    if ! docker ps | grep -q ${CONTAINER_NAME}; then
        docker start ${CONTAINER_NAME}
    fi
    
    docker cp services/${SERVICE_NAME}/src "${CONTAINER_NAME}:/build/services/${SERVICE_NAME}/"
    docker cp services/${SERVICE_NAME}/inc "${CONTAINER_NAME}:/build/services/${SERVICE_NAME}/"
    docker cp services/common "${CONTAINER_NAME}:/build/services/"
    docker cp services/interfaces "${CONTAINER_NAME}:/build/services/"
    
    docker exec ${CONTAINER_NAME} /bin/bash -c "cd /build/services/${SERVICE_NAME} && cmake --build build"
fi

docker cp "${CONTAINER_NAME}:/build/services/${SERVICE_NAME}/build/${SERVICE_NAME}_service" "${TARGETS_DIR}/"
docker stop ${CONTAINER_NAME}
echo "Build complete! Binary is in target/${ARCH}/${SERVICE_NAME}"